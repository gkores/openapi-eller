{{#if servers}}
declare var {{{name}}}Server: {
{{#each servers}}
{{#if variables}}
    {{{description}}}({{{variables}}}): string
{{else}}
    {{{description}}}: string
{{/if}}
{{/each}}
}
{{/if}}

export interface Interceptor {
    (req: Request)
    __name: string
}

{{#each security}}
{{#if isHttp}}
{{#if isBasic}}
export function {{name}}BasicAuthInterceptor(username: string, password: string): Interceptor
{{/if}}
{{#if isBearer}}
export function {{name}}BearerInterceptor(username: string, password: string): Interceptor
{{/if}}
{{/if}}

{{/each}}
declare var {{name}}Service: {
    create(url: string, ...interceptors: Interceptor[]): {{name}}Service
}

export interface {{name}}Service {
    constructor(baseUrl: string, ...interceptors: Interceptor[])
{{#each groups}}
{{#each endpoints}}
    {{operationId}}{{{operationParams}}}: Promise<{{{returnType}}}>
{{/each}}
{{/each}}
}

{{#each models}}
{{#if isEnum}}
export enum {{{name}}} {
{{#each values}}
    {{{key}}} = "{{{value}}}"{{#unless @last}},{{/unless}}
{{/each}}
}
{{else}}
export interface {{{name}}} {
{{#each fields}}
    {{#if key}}
    {{#unless isNameEqualToKey}}
    // @SerializedName("{{{key}}}")
    {{/unless}}
    {{/if}}
    {{{name}}}: {{#if format}}/* @Format("{{{format}}}") */ {{/if}}{{{type}}}{{#unless @last}},{{/unless}}
{{/each}}
}
{{#each enums}}
{{#if isEnum}}
export enum {{{../name}}}{{{name}}} {
{{#each values}}
    {{{key}}} = "{{{value}}}"{{#unless @last}},{{/unless}}
{{/each}}
}
{{/if}}
{{#if isOneOf}}
declare type {{{name}}} = {{#each values}}{{{key}}}{{#unless @last}} | {{/unless}}{{/each}}
{{/if}}
{{#unless @last}}

{{/unless}}
{{/each}}

{{/if}}

{{/each}}
